worker_processes  1;

#error_log  logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

#pid        logs/nginx.pid;


events {
    worker_connections  1024;
}


http {
    include       mime.types;
    default_type  application/octet-stream;

    sendfile        on;
    keepalive_timeout  65;

    # Define o grupo de servidores de backend Spring Boot
    # Por padrão, NGINX usará o método Round Robin (distribuição sequencial)
    upstream springboot_backends {
        server 127.0.0.1:8080; # Sua primeira instância Spring Boot
        server 127.0.0.1:8081; # Sua segunda instância Spring Boot
        # Exemplos de outros métodos de balanceamento (descomente e use um por vez):
        # least_conn; # Envia para o servidor com menos conexões ativas
        # ip_hash;    # Garante que o mesmo cliente sempre vá para o mesmo servidor (útil para sessões)
        # server 127.0.0.1:8080 weight=3; # Exemplo de pesos: 3x mais requisições para 8080
        # server 127.0.0.1:8081 weight=1;
    }

    # Bloco Upstream para Balanceamento de Carga (configuração anterior)
    upstream backend_servers {
        server 127.0.0.1:8080;
        server 127.0.0.1:8081;
        # Você pode adicionar mais servidores aqui se tiver mais instâncias
    }

    # NOVO: Bloco Upstream para apontar apenas para a porta 8081
    upstream backend_8081_only {
        server 127.0.0.1:8081;
    }

    server {
        listen 80; # NGINX vai escutar na porta 80 para balancear a carga
        server_name localhost; # Pode ser o IP da sua máquina ou um domínio

        # Configuração para balancear o tráfego para a API
        location /api/ {
            # Para balanceamento de carga (DUAS INSTÂNCIAS):
            # proxy_pass http://backend_servers;

            # Para direcionar APENAS para a instância da porta 8081 (UMA INSTÂNCIA):
            proxy_pass http://backend_8081_only;

            # Cabeçalhos adicionais para passar informações do cliente para o backend
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_connect_timeout 60;
            proxy_send_timeout 60;
            proxy_read_timeout 60;
        }

        # Se você tiver outros conteúdos (ex: estáticos) que não sejam API,
        # pode adicionar outros blocos location. Exemplo:
        # location / {
        #     root html; # Serve arquivos estáticos da pasta C:\nginx\html
        #     index index.html index.htm;
        # }
    }


    # another virtual host using mix of IP-, name-, and port-based configuration
    #
    #server {
    #    listen       8000;
    #    listen       somename:8080;
    #    server_name  somename  alias  another.alias;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}


    # HTTPS server
    #
    #server {
    #    listen       443 ssl;
    #    server_name  localhost;

    #    ssl_certificate      cert.pem;
    #    ssl_certificate_key  cert.key;

    #    ssl_session_cache    shared:SSL:1m;
    #    ssl_session_timeout  5m;

    #    ssl_ciphers  HIGH:!aNULL:!MD5;
    #    ssl_prefer_server_ciphers  on;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}

}
